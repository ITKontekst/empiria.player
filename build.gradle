import org.apache.ivy.core.settings.IvySettings

apply plugin: 'java'
sourceCompatibility = '1.5'

File userHome = new File( System.getProperty("user.home") );

IvySettings ivySettings = new IvySettings();
ivySettings.load(new File(userHome, ".ivy2/ivysettings.xml") );

repositories {
    ivy {
        url "http://dev/ivyrep/public/"
        layout 'pattern' , {
            artifact '[organisation]/[module]/[revision]/[type]s/[artifact].[ext]'
            ivy '[organisation]/[module]/[revision]/[type]s/[artifact].[ext]'
        }
    }
    ivy {
        url "http://dev/ivyrep/shared/"
        layout 'pattern' , {
            artifact '[organisation]/[module]/[revision]/[type]s/[artifact].[ext]'
            ivy '[organisation]/[module]/[revision]/[type]s/[artifact].[ext]'
        }
    }
    mavenCentral()
    maven {
        url 'http://gwtquery-plugins.googlecode.com/svn/mavenrepo/'
    }
}
dependencies {
    compile 'com.google.gwt:gwt-servlet:2.5.0'
    compile 'com.google.gwt:gwt-user:2.5.0'
    compile 'com.google.gwt:gwt-dev:2.5.0'

    compile 'com.google.gwt.inject:gin:2.0.0'
    compile 'com.googlecode.gwtquery:gwtquery:1.3.2'
    compile 'com.googlecode.gwtquery.bundles:gquery-dnd-bundle:1.0.6'

    compile 'eu.ydp:mathPlayer:latest.integration'
    compile 'eu.ydp:canvasadapter:latest.integration'
    compile 'eu.ydp:jsfilerequest:latest.integration'
    compile 'eu.ydp:ydpgwtutils:[1.11,1.12['
    compile 'eu.ydp:gwtFlashMedia:latest.integration'
    compile 'eu.ydp:gwtCreateJs:latest.integration'
    compile 'eu.ydp:jaxb4gwt:latest.integration'
    compile 'eu.ydp:matheclipse-parser-gwt:0.0.10+'

    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'junit:junit:4.11'
    testCompile 'pl.pragmatists:JUnitParams:1.0.1'
    testCompile 'org.easytesting:fest-assert-core:2.0M10'
    testCompile 'xmlunit:xmlunit:1.3'
    testCompile 'org.reflections:reflections:0.9.9-RC1'
}

sourceSets {
    main {
        java {
            srcDir 'src/'
        }
        resources {
            srcDir 'src/'
            exclude "**/*.java"
        }
    }
    test {
        java {
            srcDir 'test/'
        }
        resources {
            srcDir 'test/'
            exclude "**/*.java"
        }
    }
    
    sourceSets.test.runtimeClasspath += files(sourceSets.main.java.srcDirs)
    sourceSets.test.runtimeClasspath += files(sourceSets.test.java.srcDirs)
}


test {
    useJUnit()
    include "**/JUnitTestSuite.*"
    include "**/GWTTestCaseSuite.*"
    include "**/MainFlowProcessorTest.*"

    forkEvery = 1
    maxHeapSize = '512M'
    jvmArgs( ['-XX:MaxPermSize=256M', '-Xss16M']  )
}

class GWTCompile extends DefaultTask {
    private String buildDir;
    private String module;

    public void setBuildDir( String dir ) {
        this.buildDir = dir;
    }
    public void setModule( String module ) {
        this.module = module;
    }


    @TaskAction
    public void exec() {
        def jExec = project.tasks.create( name: 'mostStupid', type: JavaExec )

        def javaConvention = project.getConvention().getPlugin(JavaPluginConvention);
        def main = javaConvention.getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME);

        jExec.inputs.source( main.java.srcDirs )
        jExec.inputs.dir( main.output.resourcesDir )
        jExec.outputs.dir( buildDir )
        jExec.outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()

        new File(buildDir).mkdirs()

        jExec.main = 'com.google.gwt.dev.Compiler'
        jExec.classpath {
            [
                main.java.srcDirs,           // Java source
                main.output.resourcesDir,    // Generated resources
                main.output.classesDir,      // Generated classes
                main.compileClasspath,       // Deps
            ]   
        }
     
        jExec.args =
            [
                module, // Your GWT module
                '-war', buildDir,
                '-logLevel', 'INFO',
                '-localWorkers', '2',
                '-XdisableCastChecking'
            ]

        jExec.systemProperty 'gwt.args', '-logLevel WARN'
        jExec.systemProperty 'java.awt.headless', 'true'

        jExec.maxHeapSize = '512M'
        jExec.jvmArgs( '-XX:MaxPermSize=256M' )

        jExec.exec()
    }
}

task compileMain(dependsOn: [classes], type: GWTCompile) {
    module = 'eu.ydp.empiria.player.Player'
    buildDir = "${project.buildDir}/gwt"
}

task compileGwt (dependsOn: [classes, test], type: JavaExec) {
    def buildDir = "${project.buildDir}/gwt"
     
    inputs.source sourceSets.main.java.srcDirs
    inputs.dir sourceSets.main.output.resourcesDir
    outputs.dir buildDir
     
    // Workaround for incremental build (GRADLE-1483)
    outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()
     
    doFirst {
        file(buildDir).mkdirs()
    }
     
    main = 'com.google.gwt.dev.Compiler'
     
    classpath {
        [
            sourceSets.main.java.srcDirs,           // Java source
            sourceSets.main.output.resourcesDir,    // Generated resources
            sourceSets.main.output.classesDir,      // Generated classes
            sourceSets.main.compileClasspath,       // Deps
        ]   
    }
     
    args =
        [
            'eu.ydp.empiria.player.Player', // Your GWT module
            '-war', buildDir,
            '-logLevel', 'INFO',
            '-localWorkers', '2',
            '-XdisableCastChecking'
            // '-draftCompile' // Speeds up compile with 25%
        ]
         
    systemProperty 'gwt.args', '-logLevel WARN'
    systemProperty 'java.awt.headless', 'true'

    maxHeapSize = '512M'
    jvmArgs( '-XX:MaxPermSize=256M' )
}
