<?xml version="1.0" encoding="utf-8" ?>
<project name="empiria.player" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<tstamp><format property="tstamp" pattern="yyyyMMddHHmm" timezone="GMT"/></tstamp>
	<property file="default.properties" />

	<dirname property="base.dir" file="${ant.file.empiria.player}" />
	<property name="bin.dir" value="${base.dir}/war/WEB-INF/classes"/>
	<property name="bin.test.dir" value="${base.dir}/bin.test"/>
	<property name="src.dir" value="${base.dir}/src"/>
	<property name="dist.dir" value="${base.dir}/dist/build" />
	<property name="test.reports.dev.dir" value="${base.dir}/reports/htmlunit.dev" />

	<property name="lib.dir" value="${base.dir}/libs" />
	<property name="ivylib.dir" value="${base.dir}/ivy-lib" />
	<property name="lib.coverage.dir" value="${base.dir}/ivy-lib-coverage" />
	<property name="version.file" value="${src.dir}/eu/ydp/empiria/player/client/version/version.txt"/>
	<echo>${ivylib.dir}</echo>

  <condition property="XstartOnFirstThread" value="-XstartOnFirstThread">
    <os family="mac"/>
  </condition>

  <condition property="XstartOnFirstThread" value="">
    <not><os family="mac"/></not>
  </condition>

  <!-- option "-XdisableCastChecking" is needed for iOS 6.x compatibility -->
  <condition property="compile.disableCastChecking" value="-XdisableCastChecking" else="">
    <equals arg1="${compiler.castchecking}" arg2="false" />
  </condition>

  <path id="project.class.path">
    <pathelement location="${bin.dir}"/>
    <fileset dir="${lib.dir}"/>
    <fileset dir="${ivylib.dir}" includes="**/*.jar"/>
    <fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
  </path>

  <target name="resolve" depends="version.file" description="--> retrieve dependencies with ivy">
  	<ivy:retrieve pattern="${ivylib.dir}/[artifact].[ext]" conf="default, lib, test" />
  </target>

	  <target name="resolve-coverage" depends="resolve" description="--> retrieve dependencies with ivy">
	  	<ivy:retrieve pattern="${lib.coverage.dir}/[artifact].[ext]" conf="coverage" />
	  </target>

  <target name="libs" depends="resolve" description="Copy libs to WEB-INF/lib">
    <mkdir dir="war/WEB-INF/lib" />
    <copy todir="war/WEB-INF/lib">
		<fileset dir="${ivylib.dir}" includes="**/*.jar"/>
	</copy>
    <!-- Add any additional server libs that need to be copied -->
  </target>

  <target name="javac" depends="libs" description="Compile java source">
    <mkdir dir="${bin.dir}"/>
    <javac srcdir="src" includes="**" encoding="utf-8"
        destdir="${bin.dir}"
        source="1.5" target="1.5" nowarn="true"
        debug="true" debuglevel="lines,vars,source">
      <classpath refid="project.class.path"/>
    </javac>
    <copy todir="${bin.dir}">
      <fileset dir="src" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="gwtc" depends="javac" description="GWT compile to JavaScript">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
      <classpath>
        <pathelement location="src"/>
        <path refid="project.class.path"/>
      </classpath>
      <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
      <jvmarg line="${XstartOnFirstThread} -Xmx512M -Xss16M"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg line="${compile.disableCastChecking}" />
      <arg value="${module.name}"/>
    </java>
  </target>

  <target name="hosted" depends="javac" description="Run hosted mode">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.HostedMode">
      <classpath>
        <pathelement location="src"/>
        <path refid="project.class.path"/>
      </classpath>
      <jvmarg line="${XstartOnFirstThread} -Xmx256M -Xss16M"/>
      <arg value="-startupUrl"/>
      <arg value="test.html"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg line="${compile.disableCastChecking}" />
      <arg value="com.qtitools.player.Player"/>
    </java>
  </target>

  <target name="build" depends="gwtc" description="Build this project" />

  <target name="war" depends="build" description="Create a war file">
    <zip destfile="empiriaplayer.war" basedir="war"/>
  </target>

  <target name="lib" depends="javac, buildnumber" description="Create module library">
    <mkdir dir="dist/lib" />
    <copy todir="dist/lib">
      <fileset dir="${bin.dir}" includes="**/player/**"/>
      <fileset dir="src" includes="**/player/**"/>
    </copy>

	<jar destfile="dist/empiriaplayerlib.jar" basedir="dist/lib"/>
	<mkdir dir="emptydir"/>
  	<zip destfile="dist/empiriaplayerlibs.zip" whenempty="create" basedir="emptydir"/>
	<delete dir="emptydir"/>
  </target>


  <target name="clean" description="Cleans this project">
    <delete dir="dist"/>
	<delete dir="${ivylib.dir}"/>
    <delete dir="${bin.dir}" failonerror="false" />
    <delete dir="${bin.test.dir}" failonerror="false" />
    <delete dir="war/empiria.player" failonerror="false" />
  	<delete file="${version.file}"/>
  	<delete file="${base.dir}/metadata.xml"/>
  	<delete dir="${test.reports.dev.dir}" />

  	<delete dir="${lib.coverage.dir}"/>
    <delete dir="${instrumented.dir}" />
    <delete dir="${cobertura.report.dir}" />
    <delete file="${cobertura.datafile}"  />
  </target>

  <target name="buildnumber" description="Update build number">
	<ivy:buildnumber organisation="eu.ydp" module="empiriaplayer" />
  </target>

    <property name="cobertura.dir" value="${lib.coverage.dir}" />
    <property name="instrumented.dir" value="${base.dir}/bin.cobertura" />
    <property name="cobertura.report.dir" value="${base.dir}/cobertura-report" />
    <property name="cobertura.report.type" value="xml" />
    <property name="cobertura.datafile" value="${cobertura.report.dir}/cobertura.ser" />

  <path id="cobertura.classpath">
      <fileset dir="${lib.coverage.dir}">
          <include name="*.jar" />
          <exclude name="ant*.jar" />
      </fileset>
  </path>


  <target name="cobertura-instrument" depends="javac.tests, resolve-coverage">
  	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

  	<delete file="${cobertura.datafile}" />

  	<cobertura-instrument todir="${instrumented.dir}" datafile="${cobertura.datafile}">
  	    <fileset dir="${bin.dir}">
  	        <include name="**/*.class" />
  	        <exclude name="**/*Test.class" />
  	        <exclude name="**/com/google/**" />
  	    </fileset>
  	</cobertura-instrument>
  </target>


  <target name="javac.tests" depends="javac" description="Compiles test code">
  	<mkdir dir="${bin.test.dir}"/>

    <javac srcdir="test" includes="**" encoding="utf-8"
      source="1.5" target="1.5" nowarn="true" destdir="${bin.test.dir}"
      debug="true" debuglevel="lines,vars,source">
      <classpath refid="project.class.path"/>
    </javac>
  </target>

  <target name="test.dev" depends="javac.tests, cobertura-instrument" description="Run development mode tests">
  	<delete dir="${test.reports.dev.dir}" />
    <mkdir dir="${test.reports.dev.dir}" />
    <junit fork="yes" printsummary="yes" haltonfailure="yes">
      <jvmarg line="-Xmx256m -Xss16M" />
      <sysproperty key="gwt.args" value="-logLevel WARN" />
      <sysproperty key="java.awt.headless" value="true" />
        <sysproperty key="net.sourceforge.cobertura.datafile"
      		file="${cobertura.datafile}" />
      <classpath>
      	<pathelement location="src" />
      	<pathelement location="test" />

      	<pathelement location="${bin.test.dir}" />
        <path refid="cobertura.classpath" />
      	<pathelement location="${instrumented.dir}" />
        <path refid="project.class.path" />
      </classpath>
      <batchtest todir="${test.reports.dev.dir}" >
        <fileset dir="test" >
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
      <formatter type="plain" />
      <formatter type="xml" />
    </junit>

  	<cobertura-report
  		format="${cobertura.report.type}"
  		destdir="${cobertura.report.dir}"
		srcdir="${src.dir}"
  		datafile="${cobertura.datafile}"/>
  </target>

  <target name="test.prod" depends="javac.tests" description="Run production mode tests">
    <mkdir dir="reports/htmlunit.prod" />
    <junit fork="yes" printsummary="yes" haltonfailure="yes">
      <jvmarg line="-Xmx256m -Xss16M" />
      <sysproperty key="gwt.args" value="-prod -logLevel WARN -out www-test" />
      <sysproperty key="java.awt.headless" value="true" />
      <classpath>
        <pathelement location="src" />
        <pathelement location="test" />
        <path refid="project.class.path" />
      </classpath>
      <batchtest todir="reports/htmlunit.prod" >
        <fileset dir="test" >
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
      <formatter type="plain" />
      <formatter type="xml" />
    </junit>
  </target>

  <target name="test.all" depends="test.dev, test.prod">
  </target>

	<target name="dist.single">
		<antcall target="gwtc"/>
		<zip destfile="dist/${dist.file.name}" basedir="war/empiria.player"/>
	</target>

	  <target name="dist.all" depends="buildnumber, lib" description="Create java script distribution">
		<mkdir dir="${dist.dir}" />
		<antcall target="dist.single">
			<param name="module.name" value="eu.ydp.empiria.player.Player_webkit"/>
			<param name="dist.file.name" value="empiriaplayer_webkit.zip"/>
		</antcall>
		<antcall target="dist.single">
			<param name="module.name" value="eu.ydp.empiria.player.Player"/>
			<param name="dist.file.name" value="empiriaplayer.zip"/>
		</antcall>
		<antcall target="dist.sample"/>
	</target>

	<target name="dist" depends="dist.all, test.dev, metadata.file" description="Create java script distribution">
	</target>

  <target name="publish" depends="dist, project.file, sonar" description="Publish artifacts into Ivy repository">
  	<!-- resolve is needed to get organization/module from ivy.xml for publish task !-->
		<ivy:resolve />
		<ivy:publish
			pubrevision="${revision}"
			resolver="${ivy.publish.ydp.resolver}"
			status="${ivy.publish.status}"
			forcedeliver="true"
			artifactspattern="dist/[artifact].[ext]"
			overwrite="true"/>
	</target>

	<target name="project.file">
		<copy file="${base.dir}/project.template.xml" tofile="${base.dir}/project.xml" encoding="UTF-8">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
	</target>

	<target name="metadata.file">
		<copy file="${base.dir}/metadata.template.xml" tofile="${base.dir}/metadata.xml" encoding="UTF-8" overwrite="true">
			<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
	</target>

	<target name="version.file">
		<echo file="${version.file}">${revision}</echo>
	</target>


	<property name="sonar-build-xml" value="${ivylib.dir}/sonar-build.xml" />

	<target name="sonar" depends="build,test.dev">
		<ant target="sonar-java" antfile="${sonar-build-xml}">
			<property name="sonar.projectName" value="${ant.project.name}" />
			<property name="sonar.projectVersion" value="${revision}" />
			<property name="sonar.sources" value="${src.dir}" />
			<property name="sonar.exclusions" value="ca/**,com/google/**" />
			<property name="sonar.binaries" value="war/WEB-INF/classes,bin.test" />
			<property name="sonar.tests" value="${base.dir}/test" />
			<property name="sonar.surefire.reportsPath" value="reports/htmlunit.dev" />
			<property name="sonar.cobertura.reportPath" value="${cobertura.report.dir}/coverage.xml" />
		</ant>
	</target>

</project>
